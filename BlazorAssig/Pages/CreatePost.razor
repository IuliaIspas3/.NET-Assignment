@page "/CreatePost"
@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IPostService PostService
@inject IUserService UserService

<div class="card">
        <h3>Create Post</h3>
        <div class="form-group field">
            <label>Title:</label>
            <input type="text" @bind="postTitle"/>
             <label>Context:</label>
             <input type="text" @bind="context"/>
        </div>
        <div class="form-group field">
            <label>Assignee:</label>
            <input type="text" @bind="ownerUsername"/>
        </div>
        <div class="button-row">
            @if (!string.IsNullOrEmpty(msg))
            {
                <label style="color: red">@msg</label>
            }
            <button @onclick="Create" class="acceptbtn">Create</button>
        </div>
</div>

@code {
    private User user = null!;
    //private IEnumerable<User>? users;
    private string? ownerUsername;
    private string postTitle = "";
    private string context = "";
    private string msg = "";
    private string color = "";
    
    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            user = await UserService.GetById(ownerUsername);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task Create()
    {
        msg = "";
        if (string.IsNullOrEmpty(ownerUsername))
        {
            msg = "The user with the given username doesn't exist!";
            return;
        }
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }

        try
        {
            PostCreationDto dto = new(user.UserName, postTitle, context);
            await PostService.Create(dto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}